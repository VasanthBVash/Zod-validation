[{"D:\\git\\Git master\\React-hook-form\\src\\index.tsx":"1","D:\\git\\Git master\\React-hook-form\\src\\reportWebVitals.ts":"2","D:\\git\\Git master\\React-hook-form\\src\\App.tsx":"3","D:\\git\\Git master\\React-hook-form\\src\\Components\\ReactHookForm.tsx":"4"},{"size":554,"mtime":1697469402364,"results":"5","hashOfConfig":"6"},{"size":425,"mtime":1697469402134,"results":"7","hashOfConfig":"6"},{"size":155,"mtime":1697470729900,"results":"8","hashOfConfig":"6"},{"size":2763,"mtime":1697695133509,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8q6jf4",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"D:\\git\\Git master\\React-hook-form\\src\\index.tsx",[],[],"D:\\git\\Git master\\React-hook-form\\src\\reportWebVitals.ts",[],[],"D:\\git\\Git master\\React-hook-form\\src\\App.tsx",[],[],"D:\\git\\Git master\\React-hook-form\\src\\Components\\ReactHookForm.tsx",["23"],[],"import { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Button, FormErrorMessage, Input } from \"@chakra-ui/react\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { Form, useForm } from \"react-hook-form\";\r\nimport { z } from \"zod\";\r\n\r\ninterface IProps {\r\n  userName: string,\r\n  email: string,\r\n  phoneNumber: number,\r\n  password: string\r\n}\r\n\r\nconst schema = z.object({\r\n  userName: z.string()\r\n    .min(4, { message: \"Minimum 4 character required\" })\r\n    .max(20, { message: \"Maximum 20 character\" }),\r\n  email: z.string()\r\n    .email({ message: \"Invalid email\" }),\r\n  password: z.string()\r\n    .min(8, { message: \"minimum 8 character \" })\r\n    .max(20, { message: \"Maximum 20 character\" }),\r\n})\r\n\r\nfunction UserForm() {\r\n  const {\r\n    handleSubmit,\r\n    register,\r\n    formState: { isSubmitting, errors },\r\n  } = useForm<IProps>({\r\n    resolver: zodResolver(schema),\r\n  });\r\n\r\n  const onsubmit = () => {\r\n    alert(\"Form have been submited\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h2>User Form</h2>\r\n      <form onSubmit={handleSubmit(onsubmit)}>\r\n        <FormControl id=\"userName\" isRequired isInvalid={!!errors.userName}>\r\n          <FormLabel>UserName</FormLabel>\r\n          <Input placeholder=\"Enter Name\" {...register(\"userName\")} />\r\n          <FormErrorMessage>\r\n            {errors.userName && errors.userName.message}\r\n          </FormErrorMessage>\r\n        </FormControl>\r\n        <FormControl id=\"email\" isRequired isInvalid={!!errors.email}>\r\n          <FormLabel htmlFor=\"Enter name\">Email </FormLabel>\r\n          <Input\r\n            type=\"email\"\r\n            placeholder=\"Enter Email\"\r\n            {...register(\"email\")}\r\n          />\r\n          <FormErrorMessage>\r\n            {errors.email && errors.email.message}\r\n          </FormErrorMessage>\r\n        </FormControl>\r\n        <FormControl id=\"phoneNumber\" isRequired>\r\n          <FormLabel htmlFor=\"name\">PhoneNumber</FormLabel>\r\n          <Input\r\n            type=\"number\"\r\n            placeholder=\"Enter PhoneNumber\"\r\n            {...register(\"phoneNumber\")}\r\n          />\r\n        </FormControl>\r\n        <FormControl id=\"passoword\" isRequired isInvalid={!!errors.password}>\r\n          <FormLabel htmlFor=\"name\">Password</FormLabel>\r\n          <Input\r\n            type=\"password\"\r\n            placeholder=\"Enter Password\"\r\n            {...register(\"password\")}\r\n          />\r\n          <FormErrorMessage>\r\n            {errors.password && errors.password.message}\r\n          </FormErrorMessage>\r\n        </FormControl>\r\n        <Button mt={4} colorScheme=\"teal\" isLoading={isSubmitting} type=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </form>\r\n      <h4>On Submitting you get alert message</h4>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UserForm;\r\n\r\n",{"ruleId":"24","severity":1,"message":"25","line":4,"column":10,"nodeType":"26","messageId":"27","endLine":4,"endColumn":14},"@typescript-eslint/no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar"]